---
const { videos } = Astro.props;
---

<div class="plyr-container">
  <video
    class="plyr-video"
    playsinline
    preload="auto"
    data-plyr-provider="html5"
    data-poster={videos.thumbnail}
    style="width: 100%; height: 100%; object-fit: cover;"
  >
    <source src={videos.name} type="video/mp4" />
    Your browser does not support the video tag. Path: {videos.path}
  </video>
</div>

<script>
  import Plyr from "plyr";

  // Add this before initializing Plyr
  function checkVideoSupport() {
    const video = document.createElement("video");
    console.log("Video support info:");
    console.log("canPlayType(video/mp4):", video.canPlayType("video/mp4"));
    console.log("Plyr version:", Plyr.version);
    console.log("User Agent:", navigator.userAgent);
    console.log("iOS?:", /iPad|iPhone|iPod/.test(navigator.userAgent));
  }

  // Call it before initPlayer
  // checkVideoSupport();

  // Check if device is iOS or mobile
  const isiOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
  const isMobile =
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent,
    );

  function initPlayer() {
    const players = Array.from(document.querySelectorAll('.plyr-video')).map(p => {
      const player = new Plyr(p, {
        debug: true,
        controls: [
          'play-large',
          'play',
          'progress',
          'current-time',
          'mute',
          'volume',
          'fullscreen'
        ],
        loadSprite: true,
        iconUrl: '/plyr.svg',
        clickToPlay: true,
        muted: true,
        autopause: true,
        playsinline: true,
        resetOnEnd: true,
        fullscreen: {
          enabled: true,
          fallback: true,
          iosNative: true
        }
      });

      // Create intersection observer with lower threshold
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const playPromise = player.play();
              
              if (playPromise !== undefined) {
                playPromise
                  .then(() => {
                    console.log('Autoplay started');
                  })
                  .catch(error => {
                    console.log('Autoplay prevented:', error);
                  });
              }
            } else {
              player.stop();  // This was working in the original version
            }
          });
        },
        { threshold: 0.25 }
      );

      if (player.elements.container) {
        observer.observe(player.elements.container);
      }

      return player;
    });
  }

  // Initialize when DOM is ready and when page is fully loaded
  document.addEventListener("DOMContentLoaded", initPlayer);
  window.addEventListener("load", initPlayer);
</script>
