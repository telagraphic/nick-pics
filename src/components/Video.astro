---
const { videos } = Astro.props;
---

<div class="plyr-container">
  <video
    class="plyr-video"
    playsinline
    autoplay
    preload="auto"
    data-plyr-provider="html5"
    data-poster=`videos/${videos.thumbnail}.png` 
    style="width: 100%; height: 100%; object-fit: cover;"
  >
  <source src=`videos/${videos.name}.webm` type="video/webm" class="desktop-source" />
  <source src=`videos/${videos.name}.mp4`  type="video/mp4" class="mobile-source" />
    Your browser does not support the video tag. Path: {videos.path}
  </video>
</div>

<script>
  import Plyr from "plyr";

  // Check if device is iOS or mobile
  const isiOS = /iPad|iPhone|iPod|Android/i.test(navigator.userAgent);
  const isMobile =
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent,
    );

  function initPlayer() {

    const videos = document.querySelectorAll('.plyr-video');
    videos.forEach(video => {
      const desktopSource = video.querySelector('.desktop-source');
      const mobileSource = video.querySelector('.mobile-source');
      
      if (isMobile) {
        if (desktopSource) desktopSource.remove();
      } else {
        if (mobileSource) mobileSource.remove();
      }
    });
    const players = Array.from(document.querySelectorAll('.plyr-video')).map(p => {
      const player = new Plyr(p, {
        debug: false,
        controls: [
          'play-large',
          'play',
          // 'progress',
          // 'current-time',
          'mute',
          'fullscreen'
        ],
        loadSprite: true,
        iconUrl: '/plyr.svg',
        clickToPlay: true,
        muted: false,
        // toggleInvert: false,
        // disableContextMenu: false,
        autopause: true,
        playsinline: true,
        resetOnEnd: true,
        fullscreen: {
          enabled: true,
          fallback: true,
          iosNative: true
        }
      });

      // Create intersection observer with lower threshold
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const playPromise = player.play();
              
              if (playPromise !== undefined) {
                playPromise
                  .then(() => {
                    console.log('Autoplay started');
                  })
                  .catch(error => {
                    console.log('Autoplay prevented:', error);
                  });
              }
            } else {
              player.stop();  // This was working in the original version
            }
          });
        },
        { threshold: 1 }
      );

      // Add touch event handling
      if (player.elements.container) {
        let touchStartTime = 0;
        
        player.elements.container.addEventListener('touchstart', () => {
          touchStartTime = Date.now();
        });

        player.elements.container.addEventListener('touchend', (e) => {
          // Only handle quick taps (less than 200ms)
          if (Date.now() - touchStartTime < 200) {
            e.preventDefault();
            if (player.playing) {
              player.pause();
            } else {
              player.play();
            }
          }
        });

        observer.observe(player.elements.container);
      }

      return player;
    });
  }

  // Initialize when DOM is ready and when page is fully loaded
  document.addEventListener("DOMContentLoaded", initPlayer);
  window.addEventListener("load", initPlayer);
</script>